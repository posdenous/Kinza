{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport * as FileSystem from 'expo-file-system';\nexport var saveScreenshotToDesktop = function () {\n  var _ref = _asyncToGenerator(function* () {\n    var fileName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : `kinza-screenshot-${new Date().getTime()}.png`;\n    try {\n      if (Platform.OS === 'web') {\n        console.log('Screenshot functionality is currently only supported on native platforms');\n        return {\n          success: false,\n          error: 'Not supported on web platform'\n        };\n      }\n      if (Platform.OS === 'macos') {\n        var desktopDir = `${FileSystem.documentDirectory}/../Desktop/`;\n        var _filePath = `${desktopDir}${fileName}`;\n        var content = 'To capture a screenshot on macOS:\\n\\n' + '1. Press Command (⌘) + Shift + 4\\n' + '2. Select the area you want to capture\\n' + '3. The screenshot will be saved to your desktop';\n        yield FileSystem.writeAsStringAsync(_filePath.replace('.png', '.txt'), content);\n        console.log(`Instructions saved to: ${_filePath.replace('.png', '.txt')}`);\n        return {\n          success: true,\n          filePath: _filePath.replace('.png', '.txt')\n        };\n      }\n      var filePath = `${FileSystem.documentDirectory}${fileName}`;\n      console.log(`Would save screenshot to: ${filePath} (functionality limited without native modules)`);\n      return {\n        success: true,\n        message: 'Screenshot functionality requires additional native modules'\n      };\n    } catch (error) {\n      console.error('Screenshot save failed:', error);\n      return {\n        success: false,\n        error: error\n      };\n    }\n  });\n  return function saveScreenshotToDesktop() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var createScreenshotButton = function createScreenshotButton(onPress) {\n  return {\n    takeScreenshot: onPress\n  };\n};\nexport var useScreenshot = function useScreenshot() {\n  return {\n    saveScreenshotToDesktop: saveScreenshotToDesktop,\n    createScreenshotButton: createScreenshotButton\n  };\n};","map":{"version":3,"names":["FileSystem","saveScreenshotToDesktop","_ref","_asyncToGenerator","fileName","arguments","length","undefined","Date","getTime","Platform","OS","console","log","success","error","desktopDir","documentDirectory","filePath","content","writeAsStringAsync","replace","message","apply","createScreenshotButton","onPress","takeScreenshot","useScreenshot"],"sources":["/Users/brianwilliams/Documents/GitHub/Kinza/src/utils/screenshot.ts"],"sourcesContent":["import { Platform } from 'react-native';\nimport * as FileSystem from 'expo-file-system';\n\n/**\n * Utility for capturing screenshots of React Native components\n * and saving them to the user's desktop\n */\nexport const saveScreenshotToDesktop = async (fileName: string = `kinza-screenshot-${new Date().getTime()}.png`) => {\n  try {\n    // For React Native Web, we need to use a different approach\n    if (Platform.OS === 'web') {\n      console.log('Screenshot functionality is currently only supported on native platforms');\n      return { success: false, error: 'Not supported on web platform' };\n    } \n    \n    // For macOS, save to desktop folder\n    if (Platform.OS === 'macos') {\n      const desktopDir = `${FileSystem.documentDirectory}/../Desktop/`;\n      const filePath = `${desktopDir}${fileName}`;\n      \n      // Create a text file with instructions since we can't directly capture screenshots\n      const content = 'To capture a screenshot on macOS:\\n\\n' +\n                     '1. Press Command (⌘) + Shift + 4\\n' +\n                     '2. Select the area you want to capture\\n' +\n                     '3. The screenshot will be saved to your desktop';\n      \n      await FileSystem.writeAsStringAsync(filePath.replace('.png', '.txt'), content);\n      \n      console.log(`Instructions saved to: ${filePath.replace('.png', '.txt')}`);\n      return { success: true, filePath: filePath.replace('.png', '.txt') };\n    } \n    \n    // For iOS/Android, save to documents directory\n    const filePath = `${FileSystem.documentDirectory}${fileName}`;\n    console.log(`Would save screenshot to: ${filePath} (functionality limited without native modules)`); \n    return { success: true, message: 'Screenshot functionality requires additional native modules' };\n  } catch (error) {\n    console.error('Screenshot save failed:', error);\n    return { success: false, error };\n  }\n};\n\n/**\n * Function to create a screenshot utility component\n */\nexport const createScreenshotButton = (onPress: () => void) => {\n  return {\n    takeScreenshot: onPress\n  };\n};\n\n/**\n * Hook to use the screenshot functionality\n */\nexport const useScreenshot = () => {\n  return {\n    saveScreenshotToDesktop,\n    createScreenshotButton,\n  };\n};\n"],"mappings":";;AACA,OAAO,KAAKA,UAAU,MAAM,kBAAkB;AAM9C,OAAO,IAAMC,uBAAuB;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAA6E;IAAA,IAAtEC,QAAgB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,oBAAoB,IAAIG,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,MAAM;IAC7G,IAAI;MAEF,IAAIC,QAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;QACzBC,OAAO,CAACC,GAAG,CAAC,0EAA0E,CAAC;QACvF,OAAO;UAAEC,OAAO,EAAE,KAAK;UAAEC,KAAK,EAAE;QAAgC,CAAC;MACnE;MAGA,IAAIL,QAAQ,CAACC,EAAE,KAAK,OAAO,EAAE;QAC3B,IAAMK,UAAU,GAAG,GAAGhB,UAAU,CAACiB,iBAAiB,cAAc;QAChE,IAAMC,SAAQ,GAAG,GAAGF,UAAU,GAAGZ,QAAQ,EAAE;QAG3C,IAAMe,OAAO,GAAG,uCAAuC,GACxC,oCAAoC,GACpC,0CAA0C,GAC1C,iDAAiD;QAEhE,MAAMnB,UAAU,CAACoB,kBAAkB,CAACF,SAAQ,CAACG,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,EAAEF,OAAO,CAAC;QAE9EP,OAAO,CAACC,GAAG,CAAC,0BAA0BK,SAAQ,CAACG,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,CAAC;QACzE,OAAO;UAAEP,OAAO,EAAE,IAAI;UAAEI,QAAQ,EAAEA,SAAQ,CAACG,OAAO,CAAC,MAAM,EAAE,MAAM;QAAE,CAAC;MACtE;MAGA,IAAMH,QAAQ,GAAG,GAAGlB,UAAU,CAACiB,iBAAiB,GAAGb,QAAQ,EAAE;MAC7DQ,OAAO,CAACC,GAAG,CAAC,6BAA6BK,QAAQ,iDAAiD,CAAC;MACnG,OAAO;QAAEJ,OAAO,EAAE,IAAI;QAAEQ,OAAO,EAAE;MAA8D,CAAC;IAClG,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,OAAO;QAAED,OAAO,EAAE,KAAK;QAAEC,KAAK,EAALA;MAAM,CAAC;IAClC;EACF,CAAC;EAAA,gBAjCYd,uBAAuBA,CAAA;IAAA,OAAAC,IAAA,CAAAqB,KAAA,OAAAlB,SAAA;EAAA;AAAA,GAiCnC;AAKD,OAAO,IAAMmB,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAIC,OAAmB,EAAK;EAC7D,OAAO;IACLC,cAAc,EAAED;EAClB,CAAC;AACH,CAAC;AAKD,OAAO,IAAME,aAAa,GAAG,SAAhBA,aAAaA,CAAA,EAAS;EACjC,OAAO;IACL1B,uBAAuB,EAAvBA,uBAAuB;IACvBuB,sBAAsB,EAAtBA;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}