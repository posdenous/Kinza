{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, useEffect } from 'react';\nexport var useNetworkStatus = function useNetworkStatus() {\n  var _useState = useState({\n      isConnected: true,\n      isInternetReachable: true,\n      type: 'wifi'\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    networkStatus = _useState2[0],\n    setNetworkStatus = _useState2[1];\n  useEffect(function () {\n    var checkNetworkStatus = function () {\n      var _ref = _asyncToGenerator(function* () {\n        try {\n          var response = yield fetch('https://www.google.com/favicon.ico', {\n            method: 'HEAD',\n            mode: 'no-cors'\n          });\n          setNetworkStatus({\n            isConnected: true,\n            isInternetReachable: true,\n            type: 'wifi'\n          });\n        } catch (error) {\n          setNetworkStatus({\n            isConnected: false,\n            isInternetReachable: false,\n            type: 'none'\n          });\n        }\n      });\n      return function checkNetworkStatus() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    checkNetworkStatus();\n    var interval = setInterval(checkNetworkStatus, 30000);\n    return function () {\n      return clearInterval(interval);\n    };\n  }, []);\n  return networkStatus;\n};\nexport default useNetworkStatus;","map":{"version":3,"names":["useState","useEffect","useNetworkStatus","_useState","isConnected","isInternetReachable","type","_useState2","_slicedToArray","networkStatus","setNetworkStatus","checkNetworkStatus","_ref","_asyncToGenerator","response","fetch","method","mode","error","apply","arguments","interval","setInterval","clearInterval"],"sources":["/Users/brianwilliams/Documents/GitHub/Kinza/src/hooks/common/useNetworkStatus.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\n\ninterface NetworkStatus {\n  isConnected: boolean;\n  isInternetReachable: boolean;\n  type: string;\n}\n\n/**\n * Custom hook to monitor network connectivity status\n * Simplified implementation - assumes online by default\n * In production, this would use @react-native-community/netinfo\n * @returns Network status information\n */\nexport const useNetworkStatus = (): NetworkStatus => {\n  const [networkStatus, setNetworkStatus] = useState<NetworkStatus>({\n    isConnected: true,\n    isInternetReachable: true,\n    type: 'wifi',\n  });\n\n  useEffect(() => {\n    // Simplified network detection using fetch to a reliable endpoint\n    const checkNetworkStatus = async () => {\n      try {\n        const response = await fetch('https://www.google.com/favicon.ico', {\n          method: 'HEAD',\n          mode: 'no-cors',\n        });\n        \n        setNetworkStatus({\n          isConnected: true,\n          isInternetReachable: true,\n          type: 'wifi',\n        });\n      } catch (error) {\n        setNetworkStatus({\n          isConnected: false,\n          isInternetReachable: false,\n          type: 'none',\n        });\n      }\n    };\n\n    // Check immediately\n    checkNetworkStatus();\n\n    // Check periodically\n    const interval = setInterval(checkNetworkStatus, 30000); // Every 30 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return networkStatus;\n};\n\nexport default useNetworkStatus;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAc3C,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAA,EAAwB;EACnD,IAAAC,SAAA,GAA0CH,QAAQ,CAAgB;MAChEI,WAAW,EAAE,IAAI;MACjBC,mBAAmB,EAAE,IAAI;MACzBC,IAAI,EAAE;IACR,CAAC,CAAC;IAAAC,UAAA,GAAAC,cAAA,CAAAL,SAAA;IAJKM,aAAa,GAAAF,UAAA;IAAEG,gBAAgB,GAAAH,UAAA;EAMtCN,SAAS,CAAC,YAAM;IAEd,IAAMU,kBAAkB;MAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;QACrC,IAAI;UACF,IAAMC,QAAQ,SAASC,KAAK,CAAC,oCAAoC,EAAE;YACjEC,MAAM,EAAE,MAAM;YACdC,IAAI,EAAE;UACR,CAAC,CAAC;UAEFP,gBAAgB,CAAC;YACfN,WAAW,EAAE,IAAI;YACjBC,mBAAmB,EAAE,IAAI;YACzBC,IAAI,EAAE;UACR,CAAC,CAAC;QACJ,CAAC,CAAC,OAAOY,KAAK,EAAE;UACdR,gBAAgB,CAAC;YACfN,WAAW,EAAE,KAAK;YAClBC,mBAAmB,EAAE,KAAK;YAC1BC,IAAI,EAAE;UACR,CAAC,CAAC;QACJ;MACF,CAAC;MAAA,gBAnBKK,kBAAkBA,CAAA;QAAA,OAAAC,IAAA,CAAAO,KAAA,OAAAC,SAAA;MAAA;IAAA,GAmBvB;IAGDT,kBAAkB,CAAC,CAAC;IAGpB,IAAMU,QAAQ,GAAGC,WAAW,CAACX,kBAAkB,EAAE,KAAK,CAAC;IAEvD,OAAO;MAAA,OAAMY,aAAa,CAACF,QAAQ,CAAC;IAAA;EACtC,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOZ,aAAa;AACtB,CAAC;AAED,eAAeP,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}