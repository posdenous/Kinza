{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { collection, query, getDocs, doc, getDoc } from 'firebase/firestore';\nimport { useFirestoreInstance } from './useFirestoreInstance';\nimport { getAuth } from 'firebase/auth';\nexport const useCities = () => {\n  const [cities, setCities] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [firestore] = useFirestoreInstance();\n  const auth = getAuth();\n  useEffect(() => {\n    const fetchCities = async () => {\n      if (!firestore) return;\n      setLoading(true);\n      setError(null);\n      try {\n        const citiesRef = collection(firestore, 'cities');\n        const citiesQuery = query(citiesRef);\n        const citiesSnapshot = await getDocs(citiesQuery);\n        const citiesData = [];\n        citiesSnapshot.forEach(doc => {\n          const cityData = doc.data();\n          citiesData.push(Object.assign({\n            id: doc.id\n          }, cityData));\n        });\n        citiesData.sort((a, b) => a.name.localeCompare(b.name));\n        setCities(citiesData);\n      } catch (err) {\n        console.error('Error fetching cities:', err);\n        setError(err instanceof Error ? err : new Error('An unknown error occurred'));\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchCities();\n  }, [firestore]);\n  return {\n    cities,\n    loading,\n    error\n  };\n};\nexport const useUserCity = () => {\n  const [currentCityId, setCurrentCityId] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [firestore] = useFirestoreInstance();\n  const auth = getAuth();\n  const user = auth.currentUser;\n  const {\n    cities,\n    loading: citiesLoading\n  } = useCities();\n  useEffect(() => {\n    const fetchUserCity = async () => {\n      if (!firestore || citiesLoading) return;\n      setLoading(true);\n      setError(null);\n      try {\n        if (user) {\n          const userRef = doc(firestore, 'users', user.uid);\n          const userDoc = await getDoc(userRef);\n          if (userDoc.exists()) {\n            const userData = userDoc.data();\n            if (userData.cityId) {\n              const cityExists = cities.some(city => city.id === userData.cityId && city.isActive);\n              if (cityExists) {\n                setCurrentCityId(userData.cityId);\n                return;\n              }\n            }\n          }\n        }\n        const defaultCity = cities.find(city => city.isActive);\n        if (defaultCity) {\n          setCurrentCityId(defaultCity.id);\n        } else {\n          if (cities.length > 0) {\n            setCurrentCityId(cities[0].id);\n          }\n        }\n      } catch (err) {\n        console.error('Error fetching user city:', err);\n        setError(err instanceof Error ? err : new Error('An unknown error occurred'));\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchUserCity();\n  }, [firestore, user, cities, citiesLoading]);\n  const currentCity = cities.find(city => city.id === currentCityId) || null;\n  return {\n    currentCityId,\n    currentCity,\n    loading: loading || citiesLoading,\n    error,\n    cities\n  };\n};","map":{"version":3,"names":["useState","useEffect","collection","query","getDocs","doc","getDoc","useFirestoreInstance","getAuth","useCities","cities","setCities","loading","setLoading","error","setError","firestore","auth","fetchCities","citiesRef","citiesQuery","citiesSnapshot","citiesData","forEach","cityData","data","push","Object","assign","id","sort","a","b","name","localeCompare","err","console","Error","useUserCity","currentCityId","setCurrentCityId","user","currentUser","citiesLoading","fetchUserCity","userRef","uid","userDoc","exists","userData","cityId","cityExists","some","city","isActive","defaultCity","find","length","currentCity"],"sources":["/Users/brianwilliams/Documents/GitHub/Kinza/src/hooks/useCities.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { collection, query, getDocs, doc, getDoc } from 'firebase/firestore';\nimport { useFirestoreInstance } from './useFirestoreInstance';\nimport { getAuth } from 'firebase/auth';\n\nexport interface City {\n  id: string;\n  name: string;\n  country: string;\n  isActive: boolean;\n  coordinates: {\n    latitude: number;\n    longitude: number;\n  };\n  timezone: string;\n  locales: string[]; // Supported languages for this city\n}\n\nexport const useCities = () => {\n  const [cities, setCities] = useState<City[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<Error | null>(null);\n  const [firestore] = useFirestoreInstance();\n  const auth = getAuth();\n\n  useEffect(() => {\n    const fetchCities = async () => {\n      if (!firestore) return;\n\n      setLoading(true);\n      setError(null);\n\n      try {\n        const citiesRef = collection(firestore, 'cities');\n        const citiesQuery = query(citiesRef);\n        const citiesSnapshot = await getDocs(citiesQuery);\n        \n        const citiesData: City[] = [];\n        \n        citiesSnapshot.forEach((doc) => {\n          const cityData = doc.data() as Omit<City, 'id'>;\n          citiesData.push({\n            id: doc.id,\n            ...cityData\n          });\n        });\n        \n        // Sort cities by name\n        citiesData.sort((a, b) => a.name.localeCompare(b.name));\n        \n        setCities(citiesData);\n      } catch (err) {\n        console.error('Error fetching cities:', err);\n        setError(err instanceof Error ? err : new Error('An unknown error occurred'));\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchCities();\n  }, [firestore]);\n\n  return { cities, loading, error };\n};\n\nexport const useUserCity = () => {\n  const [currentCityId, setCurrentCityId] = useState<string | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<Error | null>(null);\n  const [firestore] = useFirestoreInstance();\n  const auth = getAuth();\n  const user = auth.currentUser;\n  const { cities, loading: citiesLoading } = useCities();\n\n  useEffect(() => {\n    const fetchUserCity = async () => {\n      if (!firestore || citiesLoading) return;\n\n      setLoading(true);\n      setError(null);\n\n      try {\n        // If user is logged in, get their city preference from their profile\n        if (user) {\n          const userRef = doc(firestore, 'users', user.uid);\n          const userDoc = await getDoc(userRef);\n          \n          if (userDoc.exists()) {\n            const userData = userDoc.data();\n            if (userData.cityId) {\n              // Verify that the city exists and is active\n              const cityExists = cities.some(city => city.id === userData.cityId && city.isActive);\n              \n              if (cityExists) {\n                setCurrentCityId(userData.cityId);\n                return;\n              }\n            }\n          }\n        }\n        \n        // If no user city preference or it's invalid, use the first active city\n        const defaultCity = cities.find(city => city.isActive);\n        if (defaultCity) {\n          setCurrentCityId(defaultCity.id);\n        } else {\n          // If no active cities, use the first city\n          if (cities.length > 0) {\n            setCurrentCityId(cities[0].id);\n          }\n        }\n      } catch (err) {\n        console.error('Error fetching user city:', err);\n        setError(err instanceof Error ? err : new Error('An unknown error occurred'));\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUserCity();\n  }, [firestore, user, cities, citiesLoading]);\n\n  // Get the current city object\n  const currentCity = cities.find(city => city.id === currentCityId) || null;\n\n  return { \n    currentCityId, \n    currentCity,\n    loading: loading || citiesLoading, \n    error,\n    cities\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}