{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { useState, useEffect, useCallback } from 'react';\nimport { collection, query, getDocs, doc, getDoc } from 'firebase/firestore';\nimport { useFirestoreInstance } from './useFirestoreInstance';\nimport { getAuth } from 'firebase/auth';\nimport { useApiWithRetry } from './common/useApiWithRetry';\nexport var useCities = function useCities() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    cities = _useState2[0],\n    setCities = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    loading = _useState4[0],\n    setLoading = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    error = _useState6[0],\n    setError = _useState6[1];\n  var _useFirestoreInstance = useFirestoreInstance(),\n    _useFirestoreInstance2 = _slicedToArray(_useFirestoreInstance, 1),\n    firestore = _useFirestoreInstance2[0];\n  var auth = getAuth();\n  var fetchCitiesApiCall = useCallback(_asyncToGenerator(function* () {\n    if (!firestore) throw new Error('Firestore not initialized');\n    var citiesRef = collection(firestore, 'cities');\n    var citiesQuery = query(citiesRef);\n    var citiesSnapshot = yield getDocs(citiesQuery);\n    var citiesData = [];\n    citiesSnapshot.forEach(function (doc) {\n      var cityData = doc.data();\n      citiesData.push(_objectSpread({\n        id: doc.id\n      }, cityData));\n    });\n    citiesData.sort(function (a, b) {\n      return a.name.localeCompare(b.name);\n    });\n    return citiesData;\n  }), [firestore]);\n  var _useApiWithRetry = useApiWithRetry(fetchCitiesApiCall, {\n      maxRetries: 3,\n      baseDelay: 1000\n    }),\n    fetchCitiesWithRetry = _useApiWithRetry.execute,\n    isRetrying = _useApiWithRetry.isRetrying;\n  useEffect(function () {\n    var fetchCities = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        if (!firestore) return;\n        setLoading(true);\n        setError(null);\n        try {\n          var result = yield fetchCitiesWithRetry();\n          setCities(result);\n        } catch (err) {\n          console.error('Error fetching cities:', err);\n          setError(err instanceof Error ? err : new Error('An unknown error occurred'));\n        } finally {\n          setLoading(false);\n        }\n      });\n      return function fetchCities() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    fetchCities();\n  }, [firestore, fetchCitiesWithRetry]);\n  return {\n    cities: cities,\n    loading: loading || isRetrying,\n    error: error\n  };\n};\nexport var useUserCity = function useUserCity() {\n  var _useState7 = useState(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    currentCityId = _useState8[0],\n    setCurrentCityId = _useState8[1];\n  var _useState9 = useState(true),\n    _useState0 = _slicedToArray(_useState9, 2),\n    loading = _useState0[0],\n    setLoading = _useState0[1];\n  var _useState1 = useState(null),\n    _useState10 = _slicedToArray(_useState1, 2),\n    error = _useState10[0],\n    setError = _useState10[1];\n  var _useFirestoreInstance3 = useFirestoreInstance(),\n    _useFirestoreInstance4 = _slicedToArray(_useFirestoreInstance3, 1),\n    firestore = _useFirestoreInstance4[0];\n  var auth = getAuth();\n  var user = auth.currentUser;\n  var _useCities = useCities(),\n    cities = _useCities.cities,\n    citiesLoading = _useCities.loading;\n  var fetchUserCityApiCall = useCallback(_asyncToGenerator(function* () {\n    if (!firestore) throw new Error('Firestore not initialized');\n    if (citiesLoading) throw new Error('Cities still loading');\n    if (user) {\n      var userRef = doc(firestore, 'users', user.uid);\n      var userDoc = yield getDoc(userRef);\n      if (userDoc.exists()) {\n        var userData = userDoc.data();\n        if (userData.cityId) {\n          var cityExists = cities.some(function (city) {\n            return city.id === userData.cityId && city.isActive;\n          });\n          if (cityExists) {\n            return userData.cityId;\n          }\n        }\n      }\n    }\n    var defaultCity = cities.find(function (city) {\n      return city.isActive;\n    });\n    if (defaultCity) {\n      return defaultCity.id;\n    } else {\n      if (cities.length > 0) {\n        return cities[0].id;\n      }\n    }\n    return null;\n  }), [firestore, user, cities, citiesLoading]);\n  var _useApiWithRetry2 = useApiWithRetry(fetchUserCityApiCall, {\n      maxRetries: 2,\n      baseDelay: 500\n    }),\n    fetchUserCityWithRetry = _useApiWithRetry2.execute,\n    isRetrying = _useApiWithRetry2.isRetrying;\n  useEffect(function () {\n    var fetchUserCity = function () {\n      var _ref4 = _asyncToGenerator(function* () {\n        if (!firestore || citiesLoading) return;\n        setLoading(true);\n        setError(null);\n        try {\n          var result = yield fetchUserCityWithRetry();\n          setCurrentCityId(result);\n        } catch (err) {\n          console.error('Error fetching user city:', err);\n          setError(err instanceof Error ? err : new Error('An unknown error occurred'));\n        } finally {\n          setLoading(false);\n        }\n      });\n      return function fetchUserCity() {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n    fetchUserCity();\n  }, [firestore, fetchUserCityWithRetry, citiesLoading]);\n  var currentCity = cities.find(function (city) {\n    return city.id === currentCityId;\n  }) || null;\n  return {\n    currentCityId: currentCityId,\n    currentCity: currentCity,\n    loading: loading || citiesLoading || isRetrying,\n    error: error,\n    cities: cities\n  };\n};","map":{"version":3,"names":["useState","useEffect","useCallback","collection","query","getDocs","doc","getDoc","useFirestoreInstance","getAuth","useApiWithRetry","useCities","_useState","_useState2","_slicedToArray","cities","setCities","_useState3","_useState4","loading","setLoading","_useState5","_useState6","error","setError","_useFirestoreInstance","_useFirestoreInstance2","firestore","auth","fetchCitiesApiCall","_asyncToGenerator","Error","citiesRef","citiesQuery","citiesSnapshot","citiesData","forEach","cityData","data","push","_objectSpread","id","sort","a","b","name","localeCompare","_useApiWithRetry","maxRetries","baseDelay","fetchCitiesWithRetry","execute","isRetrying","fetchCities","_ref2","result","err","console","apply","arguments","useUserCity","_useState7","_useState8","currentCityId","setCurrentCityId","_useState9","_useState0","_useState1","_useState10","_useFirestoreInstance3","_useFirestoreInstance4","user","currentUser","_useCities","citiesLoading","fetchUserCityApiCall","userRef","uid","userDoc","exists","userData","cityId","cityExists","some","city","isActive","defaultCity","find","length","_useApiWithRetry2","fetchUserCityWithRetry","fetchUserCity","_ref4","currentCity"],"sources":["/Users/brianwilliams/Documents/GitHub/Kinza/src/hooks/useCities.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { collection, query, getDocs, doc, getDoc } from 'firebase/firestore';\nimport { useFirestoreInstance } from './useFirestoreInstance';\nimport { getAuth } from 'firebase/auth';\nimport { useApiWithRetry } from './common/useApiWithRetry';\n\nexport interface City {\n  id: string;\n  name: string;\n  country: string;\n  isActive: boolean;\n  coordinates: {\n    latitude: number;\n    longitude: number;\n  };\n  timezone: string;\n  locales: string[]; // Supported languages for this city\n}\n\nexport const useCities = () => {\n  const [cities, setCities] = useState<City[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<Error | null>(null);\n  const [firestore] = useFirestoreInstance();\n  const auth = getAuth();\n\n  // Create API call function for retry logic\n  const fetchCitiesApiCall = useCallback(async () => {\n    if (!firestore) throw new Error('Firestore not initialized');\n\n    const citiesRef = collection(firestore, 'cities');\n    const citiesQuery = query(citiesRef);\n    const citiesSnapshot = await getDocs(citiesQuery);\n    \n    const citiesData: City[] = [];\n    \n    citiesSnapshot.forEach((doc) => {\n      const cityData = doc.data() as Omit<City, 'id'>;\n      citiesData.push({\n        id: doc.id,\n        ...cityData\n      });\n    });\n    \n    // Sort cities by name\n    citiesData.sort((a, b) => a.name.localeCompare(b.name));\n    \n    return citiesData;\n  }, [firestore]);\n\n  // Use retry-enabled API call for fetching cities\n  const { execute: fetchCitiesWithRetry, isRetrying } = useApiWithRetry(\n    fetchCitiesApiCall,\n    {\n      maxRetries: 3,\n      baseDelay: 1000,\n    }\n  );\n\n  useEffect(() => {\n    const fetchCities = async () => {\n      if (!firestore) return;\n\n      setLoading(true);\n      setError(null);\n\n      try {\n        const result = await fetchCitiesWithRetry();\n        setCities(result);\n      } catch (err) {\n        console.error('Error fetching cities:', err);\n        setError(err instanceof Error ? err : new Error('An unknown error occurred'));\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchCities();\n  }, [firestore, fetchCitiesWithRetry]);\n\n  return { cities, loading: loading || isRetrying, error };\n};\n\nexport const useUserCity = () => {\n  const [currentCityId, setCurrentCityId] = useState<string | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<Error | null>(null);\n  const [firestore] = useFirestoreInstance();\n  const auth = getAuth();\n  const user = auth.currentUser;\n  const { cities, loading: citiesLoading } = useCities();\n\n  // Create API call function for retry logic\n  const fetchUserCityApiCall = useCallback(async () => {\n    if (!firestore) throw new Error('Firestore not initialized');\n    if (citiesLoading) throw new Error('Cities still loading');\n\n    // If user is logged in, get their city preference from their profile\n    if (user) {\n      const userRef = doc(firestore, 'users', user.uid);\n      const userDoc = await getDoc(userRef);\n      \n      if (userDoc.exists()) {\n        const userData = userDoc.data();\n        if (userData.cityId) {\n          // Verify that the city exists and is active\n          const cityExists = cities.some(city => city.id === userData.cityId && city.isActive);\n          \n          if (cityExists) {\n            return userData.cityId;\n          }\n        }\n      }\n    }\n    \n    // If no user city preference or it's invalid, use the first active city\n    const defaultCity = cities.find(city => city.isActive);\n    if (defaultCity) {\n      return defaultCity.id;\n    } else {\n      // If no active cities, use the first city\n      if (cities.length > 0) {\n        return cities[0].id;\n      }\n    }\n    \n    return null;\n  }, [firestore, user, cities, citiesLoading]);\n\n  // Use retry-enabled API call for fetching user city\n  const { execute: fetchUserCityWithRetry, isRetrying } = useApiWithRetry(\n    fetchUserCityApiCall,\n    {\n      maxRetries: 2,\n      baseDelay: 500,\n    }\n  );\n\n  useEffect(() => {\n    const fetchUserCity = async () => {\n      if (!firestore || citiesLoading) return;\n\n      setLoading(true);\n      setError(null);\n\n      try {\n        const result = await fetchUserCityWithRetry();\n        setCurrentCityId(result);\n      } catch (err) {\n        console.error('Error fetching user city:', err);\n        setError(err instanceof Error ? err : new Error('An unknown error occurred'));\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUserCity();\n  }, [firestore, fetchUserCityWithRetry, citiesLoading]);\n\n  // Get the current city object\n  const currentCity = cities.find(city => city.id === currentCityId) || null;\n\n  return { \n    currentCityId, \n    currentCity,\n    loading: loading || citiesLoading || isRetrying, \n    error,\n    cities\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}