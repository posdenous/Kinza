{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, sendPasswordResetEmail, updateProfile } from 'firebase/auth';\nimport { doc, setDoc, updateDoc, serverTimestamp } from 'firebase/firestore';\nimport { auth, firestore } from '../../firebase/firebaseConfig';\nimport { UserRole } from './roles';\nexport var authService = {\n  register: function () {\n    var _register = _asyncToGenerator(function* (data) {\n      var email = data.email,\n        password = data.password,\n        displayName = data.displayName,\n        _data$role = data.role,\n        role = _data$role === void 0 ? UserRole.PARENT : _data$role,\n        _data$cityId = data.cityId,\n        cityId = _data$cityId === void 0 ? 'berlin' : _data$cityId,\n        _data$language = data.language,\n        language = _data$language === void 0 ? 'en' : _data$language;\n      var userCredential = yield createUserWithEmailAndPassword(auth, email, password);\n      var user = userCredential.user;\n      yield updateProfile(user, {\n        displayName: displayName\n      });\n      yield setDoc(doc(firestore, 'users', user.uid), {\n        email: email,\n        displayName: displayName,\n        role: role,\n        cityId: cityId,\n        language: language,\n        onboardingStep: 'pick_language',\n        createdAt: serverTimestamp(),\n        lastLoginAt: serverTimestamp(),\n        consentGiven: false,\n        savedEvents: []\n      });\n      return user;\n    });\n    function register(_x) {\n      return _register.apply(this, arguments);\n    }\n    return register;\n  }(),\n  login: function () {\n    var _login = _asyncToGenerator(function* (data) {\n      var email = data.email,\n        password = data.password;\n      var userCredential = yield signInWithEmailAndPassword(auth, email, password);\n      var user = userCredential.user;\n      yield updateDoc(doc(firestore, 'users', user.uid), {\n        lastLoginAt: serverTimestamp()\n      });\n      return user;\n    });\n    function login(_x2) {\n      return _login.apply(this, arguments);\n    }\n    return login;\n  }(),\n  logout: function () {\n    var _logout = _asyncToGenerator(function* () {\n      yield signOut(auth);\n    });\n    function logout() {\n      return _logout.apply(this, arguments);\n    }\n    return logout;\n  }(),\n  resetPassword: function () {\n    var _resetPassword = _asyncToGenerator(function* (email) {\n      yield sendPasswordResetEmail(auth, email);\n    });\n    function resetPassword(_x3) {\n      return _resetPassword.apply(this, arguments);\n    }\n    return resetPassword;\n  }(),\n  updateUserProfile: function () {\n    var _updateUserProfile = _asyncToGenerator(function* (user, data) {\n      if (data.displayName) {\n        yield updateProfile(user, {\n          displayName: data.displayName\n        });\n      }\n      var updateData = {};\n      if (data.language) updateData.language = data.language;\n      if (data.cityId) updateData.cityId = data.cityId;\n      if (Object.keys(updateData).length > 0) {\n        yield updateDoc(doc(firestore, 'users', user.uid), _objectSpread(_objectSpread({}, updateData), {}, {\n          updatedAt: serverTimestamp()\n        }));\n      }\n    });\n    function updateUserProfile(_x4, _x5) {\n      return _updateUserProfile.apply(this, arguments);\n    }\n    return updateUserProfile;\n  }(),\n  updateOnboardingStep: function () {\n    var _updateOnboardingStep = _asyncToGenerator(function* (userId, step) {\n      yield updateDoc(doc(firestore, 'users', userId), {\n        onboardingStep: step,\n        updatedAt: serverTimestamp()\n      });\n    });\n    function updateOnboardingStep(_x6, _x7) {\n      return _updateOnboardingStep.apply(this, arguments);\n    }\n    return updateOnboardingStep;\n  }(),\n  setUserConsent: function () {\n    var _setUserConsent = _asyncToGenerator(function* (userId, consent) {\n      yield updateDoc(doc(firestore, 'users', userId), {\n        consentGiven: consent,\n        updatedAt: serverTimestamp()\n      });\n    });\n    function setUserConsent(_x8, _x9) {\n      return _setUserConsent.apply(this, arguments);\n    }\n    return setUserConsent;\n  }(),\n  getCurrentUser: function getCurrentUser() {\n    return auth.currentUser;\n  }\n};\nexport default authService;","map":{"version":3,"names":["createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","sendPasswordResetEmail","updateProfile","doc","setDoc","updateDoc","serverTimestamp","auth","firestore","UserRole","authService","register","_register","_asyncToGenerator","data","email","password","displayName","_data$role","role","PARENT","_data$cityId","cityId","_data$language","language","userCredential","user","uid","onboardingStep","createdAt","lastLoginAt","consentGiven","savedEvents","_x","apply","arguments","login","_login","_x2","logout","_logout","resetPassword","_resetPassword","_x3","updateUserProfile","_updateUserProfile","updateData","Object","keys","length","_objectSpread","updatedAt","_x4","_x5","updateOnboardingStep","_updateOnboardingStep","userId","step","_x6","_x7","setUserConsent","_setUserConsent","consent","_x8","_x9","getCurrentUser","currentUser"],"sources":["/Users/brianwilliams/Documents/GitHub/Kinza/src/auth/authService.ts"],"sourcesContent":["import { \n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signOut,\n  sendPasswordResetEmail,\n  updateProfile,\n  User\n} from 'firebase/auth';\nimport { doc, setDoc, updateDoc, serverTimestamp } from 'firebase/firestore';\nimport { auth, firestore } from '../../firebase/firebaseConfig';\nimport { UserRole } from './roles';\n\n/**\n * Interface for user registration data\n */\ninterface RegisterData {\n  email: string;\n  password: string;\n  displayName: string;\n  role?: UserRole;\n  cityId?: string;\n  language?: string;\n}\n\n/**\n * Interface for user login data\n */\ninterface LoginData {\n  email: string;\n  password: string;\n}\n\n/**\n * Service for handling authentication operations\n */\nexport const authService = {\n  /**\n   * Register a new user\n   * @param data User registration data\n   * @returns The created user\n   */\n  async register(data: RegisterData): Promise<User> {\n    const { email, password, displayName, role = UserRole.PARENT, cityId = 'berlin', language = 'en' } = data;\n    \n    // Create user in Firebase Auth\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n    \n    // Update profile with display name\n    await updateProfile(user, { displayName });\n    \n    // Create user document in Firestore\n    await setDoc(doc(firestore, 'users', user.uid), {\n      email,\n      displayName,\n      role,\n      cityId,\n      language,\n      onboardingStep: 'pick_language',\n      createdAt: serverTimestamp(),\n      lastLoginAt: serverTimestamp(),\n      consentGiven: false,\n      savedEvents: []\n    });\n    \n    return user;\n  },\n  \n  /**\n   * Log in an existing user\n   * @param data User login data\n   * @returns The logged in user\n   */\n  async login(data: LoginData): Promise<User> {\n    const { email, password } = data;\n    \n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n    \n    // Update last login timestamp\n    await updateDoc(doc(firestore, 'users', user.uid), {\n      lastLoginAt: serverTimestamp()\n    });\n    \n    return user;\n  },\n  \n  /**\n   * Log out the current user\n   */\n  async logout(): Promise<void> {\n    await signOut(auth);\n  },\n  \n  /**\n   * Send password reset email\n   * @param email User's email address\n   */\n  async resetPassword(email: string): Promise<void> {\n    await sendPasswordResetEmail(auth, email);\n  },\n  \n  /**\n   * Update user profile\n   * @param user Current user\n   * @param data Data to update\n   */\n  async updateUserProfile(user: User, data: Partial<RegisterData>): Promise<void> {\n    if (data.displayName) {\n      await updateProfile(user, { displayName: data.displayName });\n    }\n    \n    const updateData: Record<string, any> = {};\n    if (data.language) updateData.language = data.language;\n    if (data.cityId) updateData.cityId = data.cityId;\n    \n    if (Object.keys(updateData).length > 0) {\n      await updateDoc(doc(firestore, 'users', user.uid), {\n        ...updateData,\n        updatedAt: serverTimestamp()\n      });\n    }\n  },\n  \n  /**\n   * Update user onboarding step\n   * @param userId User ID\n   * @param step Onboarding step\n   */\n  async updateOnboardingStep(userId: string, step: string): Promise<void> {\n    await updateDoc(doc(firestore, 'users', userId), {\n      onboardingStep: step,\n      updatedAt: serverTimestamp()\n    });\n  },\n  \n  /**\n   * Set user consent for child profiles\n   * @param userId User ID\n   * @param consent Consent value\n   */\n  async setUserConsent(userId: string, consent: boolean): Promise<void> {\n    await updateDoc(doc(firestore, 'users', userId), {\n      consentGiven: consent,\n      updatedAt: serverTimestamp()\n    });\n  },\n  \n  /**\n   * Get the current authenticated user\n   * @returns The current user or null if not authenticated\n   */\n  getCurrentUser(): User | null {\n    return auth.currentUser;\n  }\n};\n\nexport default authService;\n"],"mappings":";;;;AAAA,SACEA,8BAA8B,EAC9BC,0BAA0B,EAC1BC,OAAO,EACPC,sBAAsB,EACtBC,aAAa,QAER,eAAe;AACtB,SAASC,GAAG,EAAEC,MAAM,EAAEC,SAAS,EAAEC,eAAe,QAAQ,oBAAoB;AAC5E,SAASC,IAAI,EAAEC,SAAS,QAAQ,+BAA+B;AAC/D,SAASC,QAAQ,QAAQ,SAAS;AAyBlC,OAAO,IAAMC,WAAW,GAAG;EAMnBC,QAAQ;IAAA,IAAAC,SAAA,GAAAC,iBAAA,YAACC,IAAkB,EAAiB;MAChD,IAAQC,KAAK,GAAwFD,IAAI,CAAjGC,KAAK;QAAEC,QAAQ,GAA8EF,IAAI,CAA1FE,QAAQ;QAAEC,WAAW,GAAiEH,IAAI,CAAhFG,WAAW;QAAAC,UAAA,GAAiEJ,IAAI,CAAnEK,IAAI;QAAJA,IAAI,GAAAD,UAAA,cAAGT,QAAQ,CAACW,MAAM,GAAAF,UAAA;QAAAG,YAAA,GAAyCP,IAAI,CAA3CQ,MAAM;QAANA,MAAM,GAAAD,YAAA,cAAG,QAAQ,GAAAA,YAAA;QAAAE,cAAA,GAAsBT,IAAI,CAAxBU,QAAQ;QAARA,QAAQ,GAAAD,cAAA,cAAG,IAAI,GAAAA,cAAA;MAGhG,IAAME,cAAc,SAAS3B,8BAA8B,CAACS,IAAI,EAAEQ,KAAK,EAAEC,QAAQ,CAAC;MAClF,IAAMU,IAAI,GAAGD,cAAc,CAACC,IAAI;MAGhC,MAAMxB,aAAa,CAACwB,IAAI,EAAE;QAAET,WAAW,EAAXA;MAAY,CAAC,CAAC;MAG1C,MAAMb,MAAM,CAACD,GAAG,CAACK,SAAS,EAAE,OAAO,EAAEkB,IAAI,CAACC,GAAG,CAAC,EAAE;QAC9CZ,KAAK,EAALA,KAAK;QACLE,WAAW,EAAXA,WAAW;QACXE,IAAI,EAAJA,IAAI;QACJG,MAAM,EAANA,MAAM;QACNE,QAAQ,EAARA,QAAQ;QACRI,cAAc,EAAE,eAAe;QAC/BC,SAAS,EAAEvB,eAAe,CAAC,CAAC;QAC5BwB,WAAW,EAAExB,eAAe,CAAC,CAAC;QAC9ByB,YAAY,EAAE,KAAK;QACnBC,WAAW,EAAE;MACf,CAAC,CAAC;MAEF,OAAON,IAAI;IACb,CAAC;IAAA,SAzBKf,QAAQA,CAAAsB,EAAA;MAAA,OAAArB,SAAA,CAAAsB,KAAA,OAAAC,SAAA;IAAA;IAAA,OAARxB,QAAQ;EAAA;EAgCRyB,KAAK;IAAA,IAAAC,MAAA,GAAAxB,iBAAA,YAACC,IAAe,EAAiB;MAC1C,IAAQC,KAAK,GAAeD,IAAI,CAAxBC,KAAK;QAAEC,QAAQ,GAAKF,IAAI,CAAjBE,QAAQ;MAEvB,IAAMS,cAAc,SAAS1B,0BAA0B,CAACQ,IAAI,EAAEQ,KAAK,EAAEC,QAAQ,CAAC;MAC9E,IAAMU,IAAI,GAAGD,cAAc,CAACC,IAAI;MAGhC,MAAMrB,SAAS,CAACF,GAAG,CAACK,SAAS,EAAE,OAAO,EAAEkB,IAAI,CAACC,GAAG,CAAC,EAAE;QACjDG,WAAW,EAAExB,eAAe,CAAC;MAC/B,CAAC,CAAC;MAEF,OAAOoB,IAAI;IACb,CAAC;IAAA,SAZKU,KAAKA,CAAAE,GAAA;MAAA,OAAAD,MAAA,CAAAH,KAAA,OAAAC,SAAA;IAAA;IAAA,OAALC,KAAK;EAAA;EAiBLG,MAAM;IAAA,IAAAC,OAAA,GAAA3B,iBAAA,cAAkB;MAC5B,MAAMb,OAAO,CAACO,IAAI,CAAC;IACrB,CAAC;IAAA,SAFKgC,MAAMA,CAAA;MAAA,OAAAC,OAAA,CAAAN,KAAA,OAAAC,SAAA;IAAA;IAAA,OAANI,MAAM;EAAA;EAQNE,aAAa;IAAA,IAAAC,cAAA,GAAA7B,iBAAA,YAACE,KAAa,EAAiB;MAChD,MAAMd,sBAAsB,CAACM,IAAI,EAAEQ,KAAK,CAAC;IAC3C,CAAC;IAAA,SAFK0B,aAAaA,CAAAE,GAAA;MAAA,OAAAD,cAAA,CAAAR,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAbM,aAAa;EAAA;EASbG,iBAAiB;IAAA,IAAAC,kBAAA,GAAAhC,iBAAA,YAACa,IAAU,EAAEZ,IAA2B,EAAiB;MAC9E,IAAIA,IAAI,CAACG,WAAW,EAAE;QACpB,MAAMf,aAAa,CAACwB,IAAI,EAAE;UAAET,WAAW,EAAEH,IAAI,CAACG;QAAY,CAAC,CAAC;MAC9D;MAEA,IAAM6B,UAA+B,GAAG,CAAC,CAAC;MAC1C,IAAIhC,IAAI,CAACU,QAAQ,EAAEsB,UAAU,CAACtB,QAAQ,GAAGV,IAAI,CAACU,QAAQ;MACtD,IAAIV,IAAI,CAACQ,MAAM,EAAEwB,UAAU,CAACxB,MAAM,GAAGR,IAAI,CAACQ,MAAM;MAEhD,IAAIyB,MAAM,CAACC,IAAI,CAACF,UAAU,CAAC,CAACG,MAAM,GAAG,CAAC,EAAE;QACtC,MAAM5C,SAAS,CAACF,GAAG,CAACK,SAAS,EAAE,OAAO,EAAEkB,IAAI,CAACC,GAAG,CAAC,EAAAuB,aAAA,CAAAA,aAAA,KAC5CJ,UAAU;UACbK,SAAS,EAAE7C,eAAe,CAAC;QAAC,EAC7B,CAAC;MACJ;IACF,CAAC;IAAA,SAfKsC,iBAAiBA,CAAAQ,GAAA,EAAAC,GAAA;MAAA,OAAAR,kBAAA,CAAAX,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAjBS,iBAAiB;EAAA;EAsBjBU,oBAAoB;IAAA,IAAAC,qBAAA,GAAA1C,iBAAA,YAAC2C,MAAc,EAAEC,IAAY,EAAiB;MACtE,MAAMpD,SAAS,CAACF,GAAG,CAACK,SAAS,EAAE,OAAO,EAAEgD,MAAM,CAAC,EAAE;QAC/C5B,cAAc,EAAE6B,IAAI;QACpBN,SAAS,EAAE7C,eAAe,CAAC;MAC7B,CAAC,CAAC;IACJ,CAAC;IAAA,SALKgD,oBAAoBA,CAAAI,GAAA,EAAAC,GAAA;MAAA,OAAAJ,qBAAA,CAAArB,KAAA,OAAAC,SAAA;IAAA;IAAA,OAApBmB,oBAAoB;EAAA;EAYpBM,cAAc;IAAA,IAAAC,eAAA,GAAAhD,iBAAA,YAAC2C,MAAc,EAAEM,OAAgB,EAAiB;MACpE,MAAMzD,SAAS,CAACF,GAAG,CAACK,SAAS,EAAE,OAAO,EAAEgD,MAAM,CAAC,EAAE;QAC/CzB,YAAY,EAAE+B,OAAO;QACrBX,SAAS,EAAE7C,eAAe,CAAC;MAC7B,CAAC,CAAC;IACJ,CAAC;IAAA,SALKsD,cAAcA,CAAAG,GAAA,EAAAC,GAAA;MAAA,OAAAH,eAAA,CAAA3B,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAdyB,cAAc;EAAA;EAWpBK,cAAc,WAAdA,cAAcA,CAAA,EAAgB;IAC5B,OAAO1D,IAAI,CAAC2D,WAAW;EACzB;AACF,CAAC;AAED,eAAexD,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}